package br.com.alura.microservice.loja.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import br.com.alura.microservice.loja.client.FornecedorClient;
import br.com.alura.microservice.loja.controller.dto.CompraDTO;
import br.com.alura.microservice.loja.controller.dto.InfoFornecedorDTO;
import br.com.alura.microservice.loja.controller.dto.InfoPeditoDTO;
import br.com.alura.microservice.loja.model.Compra;

@Service
public class CompraService {

	@Autowired
	private FornecedorClient fornecedorClient;
//	@Autowired
//	private RestTemplate client;
//	
//	@Autowired
//	private DiscoveryClient eurekaClient;
	
	public Compra realizaCompra(CompraDTO compra) {
		
		/**
		 * A titulo de curiosidade, o curso apresenta essa abordade de comunicação utilizando o RestTemplate e o Ribbon
		 * 
		 * requisitar de outro microsservice
		 * 
		 * ResponseEntity<InfoFornecedorDTO> exchange = 
		 *		client.exchange("http://fornecedor/info/"+compra.getEndereco().getEstado(),
		 *	HttpMethod.GET, null, InfoFornecedorDTO.class);
		 * 
		 * mostrar as instancias do fornecedor disponiveis no load balancing pelo Ribbon
		 *
		 * 	eurekaClient.getInstances("fornecedor").stream()
		 *	.forEach(fornecedor -> {
		 *		System.out.println("localhost:"+fornecedor.getPort());
		 *	});
		 */
		
		InfoFornecedorDTO info = fornecedorClient.getInfoPorEstado(compra.getEndereco().getEstado());
		
		InfoPeditoDTO pedido = fornecedorClient.realizaPedido(compra.getItens());
		
		System.out.println(info.getEndereco());
		
		Compra compraSalva = new Compra();
		compraSalva.setPedidoId(pedido.getId());
		compraSalva.setTempoDePreparo(pedido.getTempoDePreparo());
		compraSalva.setEnderecoDestino(compra.getEndereco().toString());
		
		return compraSalva;
	}

}
